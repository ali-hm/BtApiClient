/* 
 * behTIME
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BtApiClient.Client;
using BtApiClient.Model;

namespace BtApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicApiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>ApiSingleResultApiTaskModel</returns>
        ApiSingleResultApiTaskModel PublicApiAddTask (string token, ApiAddTaskViewModel taskData, string usersAssigned = null);

        /// <summary>
        /// Add a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>ApiResponse of ApiSingleResultApiTaskModel</returns>
        ApiResponse<ApiSingleResultApiTaskModel> PublicApiAddTaskWithHttpInfo (string token, ApiAddTaskViewModel taskData, string usersAssigned = null);
        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>PublicApiAuthenticateResult</returns>
        PublicApiAuthenticateResult PublicApiAuthenticate (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null);

        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>ApiResponse of PublicApiAuthenticateResult</returns>
        ApiResponse<PublicApiAuthenticateResult> PublicApiAuthenticateWithHttpInfo (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null);
        /// <summary>
        /// Get Project Tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiListResultApiTaskModel</returns>
        ApiListResultApiTaskModel PublicApiGetProjectTasks (string token, long? projectId = null, string searchTitle = null);

        /// <summary>
        /// Get Project Tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiResponse of ApiListResultApiTaskModel</returns>
        ApiResponse<ApiListResultApiTaskModel> PublicApiGetProjectTasksWithHttpInfo (string token, long? projectId = null, string searchTitle = null);
        /// <summary>
        /// Get All Projects that the user has access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>ApiListResultApiProjectModel</returns>
        ApiListResultApiProjectModel PublicApiGetProjects (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null);

        /// <summary>
        /// Get All Projects that the user has access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>ApiResponse of ApiListResultApiProjectModel</returns>
        ApiResponse<ApiListResultApiProjectModel> PublicApiGetProjectsWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null);
        /// <summary>
        /// Get Task Categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>ApiListResultTaskCategoryViewModel</returns>
        ApiListResultTaskCategoryViewModel PublicApiGetTaskCategories (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null);

        /// <summary>
        /// Get Task Categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>ApiResponse of ApiListResultTaskCategoryViewModel</returns>
        ApiResponse<ApiListResultTaskCategoryViewModel> PublicApiGetTaskCategoriesWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null);
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiListResultApiUserModel</returns>
        ApiListResultApiUserModel PublicApiGetUsers (string token, int? startIndex, int? pageSize, string searchTitle = null);

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiResponse of ApiListResultApiUserModel</returns>
        ApiResponse<ApiListResultApiUserModel> PublicApiGetUsersWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>Task of ApiSingleResultApiTaskModel</returns>
        System.Threading.Tasks.Task<ApiSingleResultApiTaskModel> PublicApiAddTaskAsync (string token, ApiAddTaskViewModel taskData, string usersAssigned = null);

        /// <summary>
        /// Add a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>Task of ApiResponse (ApiSingleResultApiTaskModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSingleResultApiTaskModel>> PublicApiAddTaskAsyncWithHttpInfo (string token, ApiAddTaskViewModel taskData, string usersAssigned = null);
        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>Task of PublicApiAuthenticateResult</returns>
        System.Threading.Tasks.Task<PublicApiAuthenticateResult> PublicApiAuthenticateAsync (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null);

        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>Task of ApiResponse (PublicApiAuthenticateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicApiAuthenticateResult>> PublicApiAuthenticateAsyncWithHttpInfo (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null);
        /// <summary>
        /// Get Project Tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiListResultApiTaskModel</returns>
        System.Threading.Tasks.Task<ApiListResultApiTaskModel> PublicApiGetProjectTasksAsync (string token, long? projectId = null, string searchTitle = null);

        /// <summary>
        /// Get Project Tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultApiTaskModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiListResultApiTaskModel>> PublicApiGetProjectTasksAsyncWithHttpInfo (string token, long? projectId = null, string searchTitle = null);
        /// <summary>
        /// Get All Projects that the user has access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>Task of ApiListResultApiProjectModel</returns>
        System.Threading.Tasks.Task<ApiListResultApiProjectModel> PublicApiGetProjectsAsync (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null);

        /// <summary>
        /// Get All Projects that the user has access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultApiProjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiListResultApiProjectModel>> PublicApiGetProjectsAsyncWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null);
        /// <summary>
        /// Get Task Categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>Task of ApiListResultTaskCategoryViewModel</returns>
        System.Threading.Tasks.Task<ApiListResultTaskCategoryViewModel> PublicApiGetTaskCategoriesAsync (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null);

        /// <summary>
        /// Get Task Categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultTaskCategoryViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiListResultTaskCategoryViewModel>> PublicApiGetTaskCategoriesAsyncWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null);
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiListResultApiUserModel</returns>
        System.Threading.Tasks.Task<ApiListResultApiUserModel> PublicApiGetUsersAsync (string token, int? startIndex, int? pageSize, string searchTitle = null);

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultApiUserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiListResultApiUserModel>> PublicApiGetUsersAsyncWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicApiApi : IPublicApiApi
    {
        private BtApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicApiApi(String basePath)
        {
            this.Configuration = new BtApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BtApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicApiApi(BtApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BtApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BtApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BtApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BtApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a task 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>ApiSingleResultApiTaskModel</returns>
        public ApiSingleResultApiTaskModel PublicApiAddTask (string token, ApiAddTaskViewModel taskData, string usersAssigned = null)
        {
             ApiResponse<ApiSingleResultApiTaskModel> localVarResponse = PublicApiAddTaskWithHttpInfo(token, taskData, usersAssigned);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a task 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>ApiResponse of ApiSingleResultApiTaskModel</returns>
        public ApiResponse< ApiSingleResultApiTaskModel > PublicApiAddTaskWithHttpInfo (string token, ApiAddTaskViewModel taskData, string usersAssigned = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiAddTask");
            // verify the required parameter 'taskData' is set
            if (taskData == null)
                throw new ApiException(400, "Missing required parameter 'taskData' when calling PublicApiApi->PublicApiAddTask");

            var localVarPath = "/papi/addTask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (usersAssigned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usersAssigned", usersAssigned)); // query parameter
            if (taskData != null && taskData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiAddTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSingleResultApiTaskModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSingleResultApiTaskModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSingleResultApiTaskModel)));
        }

        /// <summary>
        /// Add a task 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>Task of ApiSingleResultApiTaskModel</returns>
        public async System.Threading.Tasks.Task<ApiSingleResultApiTaskModel> PublicApiAddTaskAsync (string token, ApiAddTaskViewModel taskData, string usersAssigned = null)
        {
             ApiResponse<ApiSingleResultApiTaskModel> localVarResponse = await PublicApiAddTaskAsyncWithHttpInfo(token, taskData, usersAssigned);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a task 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="taskData">task data</param>
        /// <param name="usersAssigned">comma separated userIds like 1,22,2005 (optional)</param>
        /// <returns>Task of ApiResponse (ApiSingleResultApiTaskModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSingleResultApiTaskModel>> PublicApiAddTaskAsyncWithHttpInfo (string token, ApiAddTaskViewModel taskData, string usersAssigned = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiAddTask");
            // verify the required parameter 'taskData' is set
            if (taskData == null)
                throw new ApiException(400, "Missing required parameter 'taskData' when calling PublicApiApi->PublicApiAddTask");

            var localVarPath = "/papi/addTask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (usersAssigned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usersAssigned", usersAssigned)); // query parameter
            if (taskData != null && taskData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiAddTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSingleResultApiTaskModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSingleResultApiTaskModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSingleResultApiTaskModel)));
        }

        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>PublicApiAuthenticateResult</returns>
        public PublicApiAuthenticateResult PublicApiAuthenticate (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null)
        {
             ApiResponse<PublicApiAuthenticateResult> localVarResponse = PublicApiAuthenticateWithHttpInfo(username, password, clientInfo, clientLanguage, oldToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>ApiResponse of PublicApiAuthenticateResult</returns>
        public ApiResponse< PublicApiAuthenticateResult > PublicApiAuthenticateWithHttpInfo (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling PublicApiApi->PublicApiAuthenticate");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling PublicApiApi->PublicApiAuthenticate");
            // verify the required parameter 'clientInfo' is set
            if (clientInfo == null)
                throw new ApiException(400, "Missing required parameter 'clientInfo' when calling PublicApiApi->PublicApiAuthenticate");

            var localVarPath = "/papi/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (clientLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientLanguage", clientLanguage)); // query parameter
            if (oldToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "oldToken", oldToken)); // query parameter
            if (clientInfo != null && clientInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientInfo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiAuthenticate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicApiAuthenticateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicApiAuthenticateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicApiAuthenticateResult)));
        }

        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>Task of PublicApiAuthenticateResult</returns>
        public async System.Threading.Tasks.Task<PublicApiAuthenticateResult> PublicApiAuthenticateAsync (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null)
        {
             ApiResponse<PublicApiAuthenticateResult> localVarResponse = await PublicApiAuthenticateAsyncWithHttpInfo(username, password, clientInfo, clientLanguage, oldToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate user and Generate a token to be used with other api calls 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">UserName</param>
        /// <param name="password">Password</param>
        /// <param name="clientInfo">a dictionary (or json object) like information of client. could be {}</param>
        /// <param name="clientLanguage">could be fa,en (optional)</param>
        /// <param name="oldToken">old token to be renewed (optional)</param>
        /// <returns>Task of ApiResponse (PublicApiAuthenticateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicApiAuthenticateResult>> PublicApiAuthenticateAsyncWithHttpInfo (string username, string password, Object clientInfo, string clientLanguage = null, string oldToken = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling PublicApiApi->PublicApiAuthenticate");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling PublicApiApi->PublicApiAuthenticate");
            // verify the required parameter 'clientInfo' is set
            if (clientInfo == null)
                throw new ApiException(400, "Missing required parameter 'clientInfo' when calling PublicApiApi->PublicApiAuthenticate");

            var localVarPath = "/papi/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (clientLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientLanguage", clientLanguage)); // query parameter
            if (oldToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "oldToken", oldToken)); // query parameter
            if (clientInfo != null && clientInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientInfo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiAuthenticate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicApiAuthenticateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicApiAuthenticateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicApiAuthenticateResult)));
        }

        /// <summary>
        /// Get Project Tasks 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiListResultApiTaskModel</returns>
        public ApiListResultApiTaskModel PublicApiGetProjectTasks (string token, long? projectId = null, string searchTitle = null)
        {
             ApiResponse<ApiListResultApiTaskModel> localVarResponse = PublicApiGetProjectTasksWithHttpInfo(token, projectId, searchTitle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Tasks 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiResponse of ApiListResultApiTaskModel</returns>
        public ApiResponse< ApiListResultApiTaskModel > PublicApiGetProjectTasksWithHttpInfo (string token, long? projectId = null, string searchTitle = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetProjectTasks");

            var localVarPath = "/papi/projectTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "projectId", projectId)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultApiTaskModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultApiTaskModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultApiTaskModel)));
        }

        /// <summary>
        /// Get Project Tasks 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiListResultApiTaskModel</returns>
        public async System.Threading.Tasks.Task<ApiListResultApiTaskModel> PublicApiGetProjectTasksAsync (string token, long? projectId = null, string searchTitle = null)
        {
             ApiResponse<ApiListResultApiTaskModel> localVarResponse = await PublicApiGetProjectTasksAsyncWithHttpInfo(token, projectId, searchTitle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Project Tasks 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultApiTaskModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiListResultApiTaskModel>> PublicApiGetProjectTasksAsyncWithHttpInfo (string token, long? projectId = null, string searchTitle = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetProjectTasks");

            var localVarPath = "/papi/projectTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "projectId", projectId)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultApiTaskModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultApiTaskModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultApiTaskModel)));
        }

        /// <summary>
        /// Get All Projects that the user has access 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>ApiListResultApiProjectModel</returns>
        public ApiListResultApiProjectModel PublicApiGetProjects (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null)
        {
             ApiResponse<ApiListResultApiProjectModel> localVarResponse = PublicApiGetProjectsWithHttpInfo(token, startIndex, pageSize, searchTitle, onlyActive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Projects that the user has access 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>ApiResponse of ApiListResultApiProjectModel</returns>
        public ApiResponse< ApiListResultApiProjectModel > PublicApiGetProjectsWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetProjects");
            // verify the required parameter 'startIndex' is set
            if (startIndex == null)
                throw new ApiException(400, "Missing required parameter 'startIndex' when calling PublicApiApi->PublicApiGetProjects");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PublicApiApi->PublicApiGetProjects");

            var localVarPath = "/papi/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter
            if (onlyActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyActive", onlyActive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultApiProjectModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultApiProjectModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultApiProjectModel)));
        }

        /// <summary>
        /// Get All Projects that the user has access 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>Task of ApiListResultApiProjectModel</returns>
        public async System.Threading.Tasks.Task<ApiListResultApiProjectModel> PublicApiGetProjectsAsync (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null)
        {
             ApiResponse<ApiListResultApiProjectModel> localVarResponse = await PublicApiGetProjectsAsyncWithHttpInfo(token, startIndex, pageSize, searchTitle, onlyActive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Projects that the user has access 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">it is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="onlyActive"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultApiProjectModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiListResultApiProjectModel>> PublicApiGetProjectsAsyncWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, bool? onlyActive = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetProjects");
            // verify the required parameter 'startIndex' is set
            if (startIndex == null)
                throw new ApiException(400, "Missing required parameter 'startIndex' when calling PublicApiApi->PublicApiGetProjects");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PublicApiApi->PublicApiGetProjects");

            var localVarPath = "/papi/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter
            if (onlyActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyActive", onlyActive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultApiProjectModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultApiProjectModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultApiProjectModel)));
        }

        /// <summary>
        /// Get Task Categories 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>ApiListResultTaskCategoryViewModel</returns>
        public ApiListResultTaskCategoryViewModel PublicApiGetTaskCategories (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null)
        {
             ApiResponse<ApiListResultTaskCategoryViewModel> localVarResponse = PublicApiGetTaskCategoriesWithHttpInfo(token, startIndex, pageSize, searchTitle, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Categories 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>ApiResponse of ApiListResultTaskCategoryViewModel</returns>
        public ApiResponse< ApiListResultTaskCategoryViewModel > PublicApiGetTaskCategoriesWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetTaskCategories");
            // verify the required parameter 'startIndex' is set
            if (startIndex == null)
                throw new ApiException(400, "Missing required parameter 'startIndex' when calling PublicApiApi->PublicApiGetTaskCategories");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PublicApiApi->PublicApiGetTaskCategories");

            var localVarPath = "/papi/taskcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "projectId", projectId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetTaskCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultTaskCategoryViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultTaskCategoryViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultTaskCategoryViewModel)));
        }

        /// <summary>
        /// Get Task Categories 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>Task of ApiListResultTaskCategoryViewModel</returns>
        public async System.Threading.Tasks.Task<ApiListResultTaskCategoryViewModel> PublicApiGetTaskCategoriesAsync (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null)
        {
             ApiResponse<ApiListResultTaskCategoryViewModel> localVarResponse = await PublicApiGetTaskCategoriesAsyncWithHttpInfo(token, startIndex, pageSize, searchTitle, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Task Categories 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <param name="projectId">If this parameter is specified, only task categories of this project will be returned (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultTaskCategoryViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiListResultTaskCategoryViewModel>> PublicApiGetTaskCategoriesAsyncWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null, long? projectId = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetTaskCategories");
            // verify the required parameter 'startIndex' is set
            if (startIndex == null)
                throw new ApiException(400, "Missing required parameter 'startIndex' when calling PublicApiApi->PublicApiGetTaskCategories");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PublicApiApi->PublicApiGetTaskCategories");

            var localVarPath = "/papi/taskcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "projectId", projectId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetTaskCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultTaskCategoryViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultTaskCategoryViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultTaskCategoryViewModel)));
        }

        /// <summary>
        /// Get All Users 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiListResultApiUserModel</returns>
        public ApiListResultApiUserModel PublicApiGetUsers (string token, int? startIndex, int? pageSize, string searchTitle = null)
        {
             ApiResponse<ApiListResultApiUserModel> localVarResponse = PublicApiGetUsersWithHttpInfo(token, startIndex, pageSize, searchTitle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Users 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>ApiResponse of ApiListResultApiUserModel</returns>
        public ApiResponse< ApiListResultApiUserModel > PublicApiGetUsersWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetUsers");
            // verify the required parameter 'startIndex' is set
            if (startIndex == null)
                throw new ApiException(400, "Missing required parameter 'startIndex' when calling PublicApiApi->PublicApiGetUsers");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PublicApiApi->PublicApiGetUsers");

            var localVarPath = "/papi/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultApiUserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultApiUserModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultApiUserModel)));
        }

        /// <summary>
        /// Get All Users 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiListResultApiUserModel</returns>
        public async System.Threading.Tasks.Task<ApiListResultApiUserModel> PublicApiGetUsersAsync (string token, int? startIndex, int? pageSize, string searchTitle = null)
        {
             ApiResponse<ApiListResultApiUserModel> localVarResponse = await PublicApiGetUsersAsyncWithHttpInfo(token, startIndex, pageSize, searchTitle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Users 
        /// </summary>
        /// <exception cref="BtApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="startIndex">It is used for paging. could be 0 to start from first</param>
        /// <param name="pageSize">Should be greater than 0</param>
        /// <param name="searchTitle"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiListResultApiUserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiListResultApiUserModel>> PublicApiGetUsersAsyncWithHttpInfo (string token, int? startIndex, int? pageSize, string searchTitle = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PublicApiApi->PublicApiGetUsers");
            // verify the required parameter 'startIndex' is set
            if (startIndex == null)
                throw new ApiException(400, "Missing required parameter 'startIndex' when calling PublicApiApi->PublicApiGetUsers");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PublicApiApi->PublicApiGetUsers");

            var localVarPath = "/papi/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTitle", searchTitle)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicApiGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiListResultApiUserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiListResultApiUserModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiListResultApiUserModel)));
        }

    }
}
