/* 
 * behTIME
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BtApiClient.Client.SwaggerDateConverter;

namespace BtApiClient.Model
{
    /// <summary>
    /// ApiTaskModel
    /// </summary>
    [DataContract]
    public partial class ApiTaskModel :  IEquatable<ApiTaskModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTaskModel" /> class.
        /// </summary>
        /// <param name="taskId">taskId.</param>
        /// <param name="taskTitle">taskTitle.</param>
        /// <param name="statusValue">statusValue.</param>
        /// <param name="statusText">statusText.</param>
        /// <param name="description">description.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="creationDateString">creationDateString.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="dueDateString">dueDateString.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="startDateString">startDateString.</param>
        /// <param name="estimateWork">estimateWork.</param>
        /// <param name="taskCategoryTitle">taskCategoryTitle.</param>
        /// <param name="projectTitle">projectTitle.</param>
        /// <param name="taskCategoryId">taskCategoryId.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="percentCompleted">percentCompleted.</param>
        /// <param name="estimateWorkSecondary">estimateWorkSecondary.</param>
        /// <param name="plannedPercentCompleted">plannedPercentCompleted.</param>
        /// <param name="filesCount">filesCount.</param>
        /// <param name="commentsCount">commentsCount.</param>
        public ApiTaskModel(long? taskId = default(long?), string taskTitle = default(string), int? statusValue = default(int?), string statusText = default(string), string description = default(string), DateTime? creationDate = default(DateTime?), string creationDateString = default(string), DateTime? dueDate = default(DateTime?), string dueDateString = default(string), DateTime? startDate = default(DateTime?), string startDateString = default(string), double? estimateWork = default(double?), string taskCategoryTitle = default(string), string projectTitle = default(string), long? taskCategoryId = default(long?), long? projectId = default(long?), double? percentCompleted = default(double?), double? estimateWorkSecondary = default(double?), double? plannedPercentCompleted = default(double?), int? filesCount = default(int?), int? commentsCount = default(int?))
        {
            this.TaskId = taskId;
            this.TaskTitle = taskTitle;
            this.StatusValue = statusValue;
            this.StatusText = statusText;
            this.Description = description;
            this.CreationDate = creationDate;
            this.CreationDateString = creationDateString;
            this.DueDate = dueDate;
            this.DueDateString = dueDateString;
            this.StartDate = startDate;
            this.StartDateString = startDateString;
            this.EstimateWork = estimateWork;
            this.TaskCategoryTitle = taskCategoryTitle;
            this.ProjectTitle = projectTitle;
            this.TaskCategoryId = taskCategoryId;
            this.ProjectId = projectId;
            this.PercentCompleted = percentCompleted;
            this.EstimateWorkSecondary = estimateWorkSecondary;
            this.PlannedPercentCompleted = plannedPercentCompleted;
            this.FilesCount = filesCount;
            this.CommentsCount = commentsCount;
        }
        
        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="TaskId", EmitDefaultValue=false)]
        public long? TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskTitle
        /// </summary>
        [DataMember(Name="TaskTitle", EmitDefaultValue=false)]
        public string TaskTitle { get; set; }

        /// <summary>
        /// Gets or Sets StatusValue
        /// </summary>
        [DataMember(Name="StatusValue", EmitDefaultValue=false)]
        public int? StatusValue { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [DataMember(Name="StatusText", EmitDefaultValue=false)]
        public string StatusText { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="CreationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets CreationDateString
        /// </summary>
        [DataMember(Name="CreationDateString", EmitDefaultValue=false)]
        public string CreationDateString { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDateString
        /// </summary>
        [DataMember(Name="DueDateString", EmitDefaultValue=false)]
        public string DueDateString { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDateString
        /// </summary>
        [DataMember(Name="StartDateString", EmitDefaultValue=false)]
        public string StartDateString { get; set; }

        /// <summary>
        /// Gets or Sets EstimateWork
        /// </summary>
        [DataMember(Name="EstimateWork", EmitDefaultValue=false)]
        public double? EstimateWork { get; set; }

        /// <summary>
        /// Gets or Sets TaskCategoryTitle
        /// </summary>
        [DataMember(Name="TaskCategoryTitle", EmitDefaultValue=false)]
        public string TaskCategoryTitle { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTitle
        /// </summary>
        [DataMember(Name="ProjectTitle", EmitDefaultValue=false)]
        public string ProjectTitle { get; set; }

        /// <summary>
        /// Gets or Sets TaskCategoryId
        /// </summary>
        [DataMember(Name="TaskCategoryId", EmitDefaultValue=false)]
        public long? TaskCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets PercentCompleted
        /// </summary>
        [DataMember(Name="PercentCompleted", EmitDefaultValue=false)]
        public double? PercentCompleted { get; set; }

        /// <summary>
        /// Gets or Sets EstimateWorkSecondary
        /// </summary>
        [DataMember(Name="EstimateWorkSecondary", EmitDefaultValue=false)]
        public double? EstimateWorkSecondary { get; set; }

        /// <summary>
        /// Gets or Sets PlannedPercentCompleted
        /// </summary>
        [DataMember(Name="PlannedPercentCompleted", EmitDefaultValue=false)]
        public double? PlannedPercentCompleted { get; set; }

        /// <summary>
        /// Gets or Sets FilesCount
        /// </summary>
        [DataMember(Name="FilesCount", EmitDefaultValue=false)]
        public int? FilesCount { get; set; }

        /// <summary>
        /// Gets or Sets CommentsCount
        /// </summary>
        [DataMember(Name="CommentsCount", EmitDefaultValue=false)]
        public int? CommentsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiTaskModel {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskTitle: ").Append(TaskTitle).Append("\n");
            sb.Append("  StatusValue: ").Append(StatusValue).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CreationDateString: ").Append(CreationDateString).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueDateString: ").Append(DueDateString).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDateString: ").Append(StartDateString).Append("\n");
            sb.Append("  EstimateWork: ").Append(EstimateWork).Append("\n");
            sb.Append("  TaskCategoryTitle: ").Append(TaskCategoryTitle).Append("\n");
            sb.Append("  ProjectTitle: ").Append(ProjectTitle).Append("\n");
            sb.Append("  TaskCategoryId: ").Append(TaskCategoryId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PercentCompleted: ").Append(PercentCompleted).Append("\n");
            sb.Append("  EstimateWorkSecondary: ").Append(EstimateWorkSecondary).Append("\n");
            sb.Append("  PlannedPercentCompleted: ").Append(PlannedPercentCompleted).Append("\n");
            sb.Append("  FilesCount: ").Append(FilesCount).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiTaskModel);
        }

        /// <summary>
        /// Returns true if ApiTaskModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiTaskModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiTaskModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskTitle == input.TaskTitle ||
                    (this.TaskTitle != null &&
                    this.TaskTitle.Equals(input.TaskTitle))
                ) && 
                (
                    this.StatusValue == input.StatusValue ||
                    (this.StatusValue != null &&
                    this.StatusValue.Equals(input.StatusValue))
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.CreationDateString == input.CreationDateString ||
                    (this.CreationDateString != null &&
                    this.CreationDateString.Equals(input.CreationDateString))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DueDateString == input.DueDateString ||
                    (this.DueDateString != null &&
                    this.DueDateString.Equals(input.DueDateString))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartDateString == input.StartDateString ||
                    (this.StartDateString != null &&
                    this.StartDateString.Equals(input.StartDateString))
                ) && 
                (
                    this.EstimateWork == input.EstimateWork ||
                    (this.EstimateWork != null &&
                    this.EstimateWork.Equals(input.EstimateWork))
                ) && 
                (
                    this.TaskCategoryTitle == input.TaskCategoryTitle ||
                    (this.TaskCategoryTitle != null &&
                    this.TaskCategoryTitle.Equals(input.TaskCategoryTitle))
                ) && 
                (
                    this.ProjectTitle == input.ProjectTitle ||
                    (this.ProjectTitle != null &&
                    this.ProjectTitle.Equals(input.ProjectTitle))
                ) && 
                (
                    this.TaskCategoryId == input.TaskCategoryId ||
                    (this.TaskCategoryId != null &&
                    this.TaskCategoryId.Equals(input.TaskCategoryId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.PercentCompleted == input.PercentCompleted ||
                    (this.PercentCompleted != null &&
                    this.PercentCompleted.Equals(input.PercentCompleted))
                ) && 
                (
                    this.EstimateWorkSecondary == input.EstimateWorkSecondary ||
                    (this.EstimateWorkSecondary != null &&
                    this.EstimateWorkSecondary.Equals(input.EstimateWorkSecondary))
                ) && 
                (
                    this.PlannedPercentCompleted == input.PlannedPercentCompleted ||
                    (this.PlannedPercentCompleted != null &&
                    this.PlannedPercentCompleted.Equals(input.PlannedPercentCompleted))
                ) && 
                (
                    this.FilesCount == input.FilesCount ||
                    (this.FilesCount != null &&
                    this.FilesCount.Equals(input.FilesCount))
                ) && 
                (
                    this.CommentsCount == input.CommentsCount ||
                    (this.CommentsCount != null &&
                    this.CommentsCount.Equals(input.CommentsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskTitle != null)
                    hashCode = hashCode * 59 + this.TaskTitle.GetHashCode();
                if (this.StatusValue != null)
                    hashCode = hashCode * 59 + this.StatusValue.GetHashCode();
                if (this.StatusText != null)
                    hashCode = hashCode * 59 + this.StatusText.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.CreationDateString != null)
                    hashCode = hashCode * 59 + this.CreationDateString.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.DueDateString != null)
                    hashCode = hashCode * 59 + this.DueDateString.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartDateString != null)
                    hashCode = hashCode * 59 + this.StartDateString.GetHashCode();
                if (this.EstimateWork != null)
                    hashCode = hashCode * 59 + this.EstimateWork.GetHashCode();
                if (this.TaskCategoryTitle != null)
                    hashCode = hashCode * 59 + this.TaskCategoryTitle.GetHashCode();
                if (this.ProjectTitle != null)
                    hashCode = hashCode * 59 + this.ProjectTitle.GetHashCode();
                if (this.TaskCategoryId != null)
                    hashCode = hashCode * 59 + this.TaskCategoryId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.PercentCompleted != null)
                    hashCode = hashCode * 59 + this.PercentCompleted.GetHashCode();
                if (this.EstimateWorkSecondary != null)
                    hashCode = hashCode * 59 + this.EstimateWorkSecondary.GetHashCode();
                if (this.PlannedPercentCompleted != null)
                    hashCode = hashCode * 59 + this.PlannedPercentCompleted.GetHashCode();
                if (this.FilesCount != null)
                    hashCode = hashCode * 59 + this.FilesCount.GetHashCode();
                if (this.CommentsCount != null)
                    hashCode = hashCode * 59 + this.CommentsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
