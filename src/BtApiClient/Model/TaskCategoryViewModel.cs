/* 
 * behTIME
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BtApiClient.Client.SwaggerDateConverter;

namespace BtApiClient.Model
{
    /// <summary>
    /// TaskCategoryViewModel
    /// </summary>
    [DataContract]
    public partial class TaskCategoryViewModel :  IEquatable<TaskCategoryViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCategoryViewModel" /> class.
        /// </summary>
        /// <param name="taskCategoryId">taskCategoryId.</param>
        /// <param name="taskCategoryTitle">taskCategoryTitle.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="projectTitle">projectTitle.</param>
        public TaskCategoryViewModel(long? taskCategoryId = default(long?), string taskCategoryTitle = default(string), long? projectId = default(long?), string projectTitle = default(string))
        {
            this.TaskCategoryId = taskCategoryId;
            this.TaskCategoryTitle = taskCategoryTitle;
            this.ProjectId = projectId;
            this.ProjectTitle = projectTitle;
        }
        
        /// <summary>
        /// Gets or Sets TaskCategoryId
        /// </summary>
        [DataMember(Name="TaskCategoryId", EmitDefaultValue=false)]
        public long? TaskCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets TaskCategoryTitle
        /// </summary>
        [DataMember(Name="TaskCategoryTitle", EmitDefaultValue=false)]
        public string TaskCategoryTitle { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTitle
        /// </summary>
        [DataMember(Name="ProjectTitle", EmitDefaultValue=false)]
        public string ProjectTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskCategoryViewModel {\n");
            sb.Append("  TaskCategoryId: ").Append(TaskCategoryId).Append("\n");
            sb.Append("  TaskCategoryTitle: ").Append(TaskCategoryTitle).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectTitle: ").Append(ProjectTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskCategoryViewModel);
        }

        /// <summary>
        /// Returns true if TaskCategoryViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskCategoryViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskCategoryViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskCategoryId == input.TaskCategoryId ||
                    (this.TaskCategoryId != null &&
                    this.TaskCategoryId.Equals(input.TaskCategoryId))
                ) && 
                (
                    this.TaskCategoryTitle == input.TaskCategoryTitle ||
                    (this.TaskCategoryTitle != null &&
                    this.TaskCategoryTitle.Equals(input.TaskCategoryTitle))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectTitle == input.ProjectTitle ||
                    (this.ProjectTitle != null &&
                    this.ProjectTitle.Equals(input.ProjectTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskCategoryId != null)
                    hashCode = hashCode * 59 + this.TaskCategoryId.GetHashCode();
                if (this.TaskCategoryTitle != null)
                    hashCode = hashCode * 59 + this.TaskCategoryTitle.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectTitle != null)
                    hashCode = hashCode * 59 + this.ProjectTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
