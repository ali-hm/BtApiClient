/* 
 * behTIME
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BtApiClient.Client.SwaggerDateConverter;

namespace BtApiClient.Model
{
    /// <summary>
    /// ApiAddTaskViewModel
    /// </summary>
    [DataContract]
    public partial class ApiAddTaskViewModel :  IEquatable<ApiAddTaskViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiAddTaskViewModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiAddTaskViewModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiAddTaskViewModel" /> class.
        /// </summary>
        /// <param name="taskTitle">taskTitle (required).</param>
        /// <param name="description">description.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="estimateWork">estimateWork.</param>
        /// <param name="taskCategoryId">taskCategoryId.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="status">status.</param>
        public ApiAddTaskViewModel(string taskTitle = default(string), string description = default(string), string dueDate = default(string), string startDate = default(string), string estimateWork = default(string), long? taskCategoryId = default(long?), long? projectId = default(long?), int? status = default(int?))
        {
            // to ensure "taskTitle" is required (not null)
            if (taskTitle == null)
            {
                throw new InvalidDataException("taskTitle is a required property for ApiAddTaskViewModel and cannot be null");
            }
            else
            {
                this.TaskTitle = taskTitle;
            }
            this.Description = description;
            this.DueDate = dueDate;
            this.StartDate = startDate;
            this.EstimateWork = estimateWork;
            this.TaskCategoryId = taskCategoryId;
            this.ProjectId = projectId;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets TaskTitle
        /// </summary>
        [DataMember(Name="TaskTitle", EmitDefaultValue=false)]
        public string TaskTitle { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public string DueDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimateWork
        /// </summary>
        [DataMember(Name="EstimateWork", EmitDefaultValue=false)]
        public string EstimateWork { get; set; }

        /// <summary>
        /// Gets or Sets TaskCategoryId
        /// </summary>
        [DataMember(Name="TaskCategoryId", EmitDefaultValue=false)]
        public long? TaskCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiAddTaskViewModel {\n");
            sb.Append("  TaskTitle: ").Append(TaskTitle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EstimateWork: ").Append(EstimateWork).Append("\n");
            sb.Append("  TaskCategoryId: ").Append(TaskCategoryId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiAddTaskViewModel);
        }

        /// <summary>
        /// Returns true if ApiAddTaskViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiAddTaskViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiAddTaskViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskTitle == input.TaskTitle ||
                    (this.TaskTitle != null &&
                    this.TaskTitle.Equals(input.TaskTitle))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EstimateWork == input.EstimateWork ||
                    (this.EstimateWork != null &&
                    this.EstimateWork.Equals(input.EstimateWork))
                ) && 
                (
                    this.TaskCategoryId == input.TaskCategoryId ||
                    (this.TaskCategoryId != null &&
                    this.TaskCategoryId.Equals(input.TaskCategoryId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskTitle != null)
                    hashCode = hashCode * 59 + this.TaskTitle.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EstimateWork != null)
                    hashCode = hashCode * 59 + this.EstimateWork.GetHashCode();
                if (this.TaskCategoryId != null)
                    hashCode = hashCode * 59 + this.TaskCategoryId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaskTitle (string) maxLength
            if(this.TaskTitle != null && this.TaskTitle.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaskTitle, length must be less than 1000.", new [] { "TaskTitle" });
            }

            // TaskTitle (string) minLength
            if(this.TaskTitle != null && this.TaskTitle.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaskTitle, length must be greater than 1.", new [] { "TaskTitle" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 2000.", new [] { "Description" });
            }

            // Description (string) minLength
            if(this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // EstimateWork (string) pattern
            Regex regexEstimateWork = new Regex(@"^[0-9]*[.:]?[0-9]+$|^[0-9]+\\s*[mMد]$", RegexOptions.CultureInvariant);
            if (false == regexEstimateWork.Match(this.EstimateWork).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EstimateWork, must match a pattern of " + regexEstimateWork, new [] { "EstimateWork" });
            }

            yield break;
        }
    }

}
